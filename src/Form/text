#Refactoring a beautiful form

Consider the form below, a simple one. Beautiful, isn't ?

---> EXIBITION OF COMPONENT.

Its features are restricted to the exibition of three inputs, validated when the submission button is pressed.

One of the ways to model it using React is shown here,

---> SHOW COMPONENT'S CODE

A really patient reading of the code above inform us the component is responsible for to render the inputs, to validate its data and to send it somewhere. 

In fact it works. However, to assign too much responsabilities for a single component can make the mantanability a difficult task.

Just the introduction of one single field and another validation rule require significant changes, violating the "Open/Closed principle"(insert link).

A mantanability of this component can be hugely improved if you share its responsabilities between other classes.

So, the task of show the inputs and expose its data can be restricted to the same Form component, that will receive by props the instruction to render its inputs.

---> SHOW NEW VERSION OF THE FORM COMPONENT.

The manipulation of the form data (validating and sending) will be done by a wrapper, with the help of external Classes.

---> SHOW WRAPPER;


The instructions to render and validate the inputs is described here.

--->

In the future, for example, we can insert a username field and require its value cannot be numerical. With a simple insertion in `fieldsets`, we can do it. The result is given below. 


Considering just the number of lines, the solution presented is more verbose. However, futures modifications, such the insertion of more fields and validation rules can add more complexibilities, making the component more prone to errors. The solution adopted avoids theses risks, at same time improves its readablity. 
 






 - USE THE WORD "ERROR PRONE".

- It is also worth noting the long list of parameters in the function 'validateFields' (insert code tag).







